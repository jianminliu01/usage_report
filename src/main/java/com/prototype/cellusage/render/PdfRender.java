package com.prototype.cellusage.render;

import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.util.Date;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.stereotype.Component;

import com.itextpdf.text.PageSize;
import com.prototype.cellusage.model.UsageByMonth;
import com.prototype.cellusage.model.UsageSummary;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

@Component
public class PdfRender {
  private static final Font BIG_BOLD_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 28, Font.BOLD);
  private static final Font MIDDLE_BOLD_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
  private static final Font BOLDITALIC_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.BOLDITALIC);
  private static final Font NORMAL_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
  private static final Font SMALL_NORMAL_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 5, Font.NORMAL);
  private static final Font SMALL_BOLD_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 5, Font.BOLD);
  private static final String[] MONTH_ABBR = {"Jan", "Feb", "Mar", "Apr", "May", "Jue", "Jul", "Aug", "Sep", "Oct",
    "Nov", "Dec"};

  public byte[] rendering(UsageSummary summary, Map<Integer, UsageByMonth> detailMap)
    throws DocumentException, FileNotFoundException {
    Document document = new Document();
    document.setPageSize(PageSize.A4.rotate());

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    PdfWriter.getInstance(document, baos);

    document.open();
    addTitle(document);
    addHeaderSection(document, summary);
    addDetailsSection(document, detailMap);
    document.close();

    return baos.toByteArray();
  }

  private void addTitle(Document document) throws DocumentException {
    addEmptyLine(document, 3);
    Paragraph title = new Paragraph("Company Cell Phone - Usage Report", BIG_BOLD_FONT);
    title.setAlignment(Element.ALIGN_CENTER);
    document.add(title);
    addEmptyLine(document, 1);

    Paragraph reportTime =
      new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(),
        BOLDITALIC_FONT);
    reportTime.setAlignment(Element.ALIGN_CENTER);
    document.add(reportTime);
  }

  private void addHeaderSection(Document document, UsageSummary summary) throws DocumentException {
    addEmptyLine(document, 3);
    Paragraph headerSection = new Paragraph("Company Cell Phone - Usage Summary", MIDDLE_BOLD_FONT);
    headerSection.setAlignment(Element.ALIGN_CENTER);
    document.add(headerSection);
    addEmptyLine(document, 1);

    PdfPTable table = new PdfPTable(2);
    float[] columnWidths = new float[]{70f, 30F};
    table.setWidths(columnWidths);
    table.setWidthPercentage(35f);

    table.addCell(tableHeaderCell("Number of Phones"));
    table.addCell(tableDataCell(Integer.toString(summary.getNumberOfPhones())));
    table.addCell(tableHeaderCell("Total Minutes"));
    table.addCell(tableDataCell(Long.toString(summary.getTotalMinutes())));
    table.addCell(tableHeaderCell("Total Data"));
    table.addCell(tableDataCell(summary.getTotalData()));
    table.addCell(tableHeaderCell("Average Minutes per Employee"));
    table.addCell(tableDataCell(summary.getAverageMinutes()));
    table.addCell(tableHeaderCell("Average Data per Employee"));
    table.addCell(tableDataCell(summary.getAverageData()));
    document.add(table);
  }

  private void addDetailsSection(Document document, Map<Integer, UsageByMonth> detailMap) throws DocumentException {
    addEmptyLine(document, 3);
    Paragraph detailSection = new Paragraph("Employee Cell Phone - Monthly Usage Details", MIDDLE_BOLD_FONT);
    detailSection.setAlignment(Element.ALIGN_CENTER);
    document.add(detailSection);
    addEmptyLine(document, 1);

    PdfPTable table = new PdfPTable(28);
    float[] columnWidths = new float[]{7f, 7f, 7f, 7f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f};
    table.setWidths(columnWidths);
    table.setWidthPercentage(90f);
    table.addCell(tableHeaderCell("Employee Id", 2, 1));
    table.addCell(tableHeaderCell("Employee Name", 2, 1));
    table.addCell(tableHeaderCell("Model", 2, 1));
    table.addCell(tableHeaderCell("Purchase Date", 2, 1));

    PdfPCell minutes = tableHeaderCell("Minutes Usage per Month", 1, 12);
    minutes.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(minutes);

    PdfPCell data = tableHeaderCell("Data Usage per Month", 1, 12);
    data.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(data);

    addMonthSubHeaders(table);

    detailMap.values().stream().forEach(detail -> addDetailRow(table, detail));

    document.add(table);
  }

  private void addMonthSubHeaders(PdfPTable table) {
    for (int repeat = 0; repeat < 2; repeat++) {
      for (int month = 0; month < 12; month++)
      table.addCell(tableHeaderSmallCell(MONTH_ABBR[month]));
    }
  }

  private void addDetailRow(PdfPTable table, UsageByMonth detail) {
    table.addCell(tableDataSmallCell(detail.getEmployeeId().toString()));
    table.addCell(tableDataSmallCell(detail.getEmployeeName()));
    table.addCell(tableDataSmallCell(detail.getModel()));
    table.addCell(tableDataSmallCell(detail.getPurchaseDate()));
    addRecordsByMonth(table, detail.getMinutesPerMonth());
    addRecordsByMonth(table, detail.getDataPerMonth());
  }

  private <T> void addRecordsByMonth(PdfPTable table, Map<Integer, T> recordsPerMonthMap) {
    Map<Integer, T> sortedMap = new TreeMap<>();
    sortedMap.putAll(recordsPerMonthMap);
    sortedMap.values().forEach(record -> table.addCell(tableDataSmallCell(String.valueOf(record))));
  }

  private void addEmptyLine(Document document, int number) throws DocumentException {
    for (int i = 0; i < number; i++) {
      document.add(new Paragraph(" "));
    }
  }

  private PdfPCell tableHeaderCell(String text) {
    return tableHeaderCell(text, 1, 1);
  }

  private PdfPCell tableHeaderCell(String text, int rowspan, int colspan) {
    PdfPCell cell = new PdfPCell(new Phrase(text, BOLDITALIC_FONT));
    cell.setRowspan(rowspan);
    cell.setColspan(colspan);
    return cell;
  }

  private PdfPCell tableHeaderSmallCell(String text) {
    return new PdfPCell(new Phrase(text, SMALL_BOLD_FONT));
  }

  private PdfPCell tableDataCell(String text) {
    return new PdfPCell(new Phrase(text, NORMAL_FONT));
  }

  private PdfPCell tableDataSmallCell(String text) {
    return new PdfPCell(new Phrase(text, SMALL_NORMAL_FONT));
  }
}
